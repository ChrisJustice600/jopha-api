datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modèles

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[] // Relation avec les notes créées par l'utilisateur

  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Groupage {
  id            Int            @id @default(autoincrement())
  code          String         @unique
  status        Status         @default(GROUPED)
  transportType TransportType? // Aérien ou Maritime
  airType       AirTransport? // Régulier ou Express (uniquement si transportType est Aérien)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  masterPacks   MasterPack[]   @relation("GroupageMasterPacks")
  colis         Colis[]        @relation("GroupageColis")
  notes         Note[]

  @@index([code])
  @@index([status])
  @@index([transportType])
  @@index([airType])
  @@index([createdAt])
}

model MasterPack {
  id         Int      @id @default(autoincrement())
  numero     String?
  poids      Int?
  groupageId Int
  groupage   Groupage @relation("GroupageMasterPacks", fields: [groupageId], references: [id])
  colis      Colis[]  @relation("MasterPackColis")

  @@index([numero])
}

model Colis {
  id               Int             @id @default(autoincrement())
  code             String?         @unique
  nom_complet      String
  status           Status          @default(RECEIVED)
  tracking_code    String
  poids            String?
  telephone        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  masterPackId     Int?
  masterPack       MasterPack?     @relation("MasterPackColis", fields: [masterPackId], references: [id])
  groupageId       Int?
  groupage         Groupage?       @relation("GroupageColis", fields: [groupageId], references: [id])
  transportType    TransportType? // Le client choisit Aérien ou Maritime
  airType          AirTransport? // Si le client choisit Aérien, il choisit Régulier ou Express
  itemType         ItemType? // Type d'article pour le calcul des tarifs
  clientAvecCodeId Int? // Lien avec le ClientAvecCode
  clientAvecCode   ClientAvecCode? @relation(fields: [clientAvecCodeId], references: [id])

  notes Note[] // Relation avec les notes hh

  @@index([nom_complet])
  @@index([status])
  @@index([transportType])
  @@index([airType])
  @@index([itemType])
  @@index([createdAt])
  @@index([updatedAt])
}

model ClientAvecCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  colis     Colis[] // Relation avec les colis envoyés par ce client avec code

  @@index([createdAt])
}

model Note {
  id        Int      @id @default(autoincrement())
  contenu   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  colisId Int?
  colis   Colis? @relation(fields: [colisId], references: [id])

  groupageId Int?
  groupage   Groupage? @relation(fields: [groupageId], references: [id])
}

enum Status {
  RECEIVED
  GROUPED
  IN_TRANSIT
  ARRIVED
  DELIVERED
}

enum TransportType {
  AERIEN
  MARITIME
}

enum AirTransport {
  REGULIER
  EXPRESS
}

enum ItemType {
  ORDINAIRE
  ELECTRONIQUE
  COSMETIQUE
  PHARMACEUTIQUE
  BIJOUX
  CABELLO
  TELEPHONE
}
