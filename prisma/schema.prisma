generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String
  email         String    @unique
  password      String
  resetToken    String? // Ajoutez ce champ
  resetTokenExp DateTime? // Ajoutez ce champ
  role          Role      @default(USER)

  logs      UserLog[]
  sessions  Session[] // Ajout de la relation avec les sessions
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  notes     Note[]

  @@index([email])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  status    String   @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
}

model UserLog {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  action         String
  ipAddress      String?
  userAgent      String?
  browser        String?
  browserVersion String?
  os             String?
  osVersion      String?
  device         String? // Type d'appareil (mobile, tablet, desktop)
  deviceModel    String? // Modèle spécifique de l'appareil
  deviceBrand    String? // Marque de l'appareil
  timestamp      DateTime @default(now())
  status         String
  details        String?
}

model Groupage {
  id            Int            @id @default(autoincrement())
  code          String         @unique
  poids_colis   String?
  status        Status         @default(GROUPED)
  transportType TransportType?
  airType       AirTransport?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  colis         Colis[]        @relation("GroupageColis")
  masterPacks   MasterPack[]   @relation("GroupageMasterPacks")
  notes         Note[]

  @@index([code])
  @@index([status])
  @@index([transportType])
  @@index([airType])
  @@index([createdAt])
}

model MasterPack {
  id          Int      @id @default(autoincrement())
  numero      String?
  poids_colis String?
  groupageId  Int
  status      Status   @default(GROUPED)
  colis       Colis[]  @relation("MasterPackColis")
  groupage    Groupage @relation("GroupageMasterPacks", fields: [groupageId], references: [id])

  @@index([numero])
  @@index([id])
}

model Colis {
  id                     Int             @id @default(autoincrement())
  code                   String          @unique
  nom_complet            String
  status                 Status          @default(RECEIVED)
  tracking_code          String          @unique
  telephone              String
  poids_colis            Float
  transportType          TransportType
  airType                AirTransport?
  itemType               ItemType
  volume                 Float?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  masterPackId           Int?
  groupageId             Int?
  clientAvecCodeId       Int?
  clientAvecCode         ClientAvecCode? @relation(fields: [clientAvecCodeId], references: [id])
  groupage               Groupage?       @relation("GroupageColis", fields: [groupageId], references: [id])
  masterPack             MasterPack?     @relation("MasterPackColis", fields: [masterPackId], references: [id])
  notes                  Note[]
  invoiceItems           InvoiceItem[]
  deliveredInvoiceItemId String?         @unique

  @@index([nom_complet])
  @@index([status])
  @@index([transportType])
  @@index([airType])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([tracking_code])
}

model Client {
  id        String    @id @default(uuid())
  fullName  String
  address   String
  phone     String    @unique
  email     String?   @unique
  createdAt DateTime  @default(now())
  invoices  Invoice[]
}

model Invoice {
  id            String           @id @default(uuid())
  invoiceNumber String           @unique
  date          DateTime         @default(now())
  isProforma    Boolean          @default(false)
  totalAmount   Float
  client        Client           @relation(fields: [clientId], references: [id])
  clientId      String
  items         InvoiceItem[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  history       InvoiceHistory[]

  @@index([invoiceNumber])
  @@index([date])
}

model InvoiceItem {
  id            String   @id @default(uuid())
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  colis         Colis    @relation(fields: [colisId], references: [id])
  colisId       Int // Changed from String to Int to match Colis.id
  discount      Int?     @default(0)
  appliedStatus Status
  isFinal       Boolean  @default(false) // Indique si c'est la facture finale
  createdAt     DateTime @default(now())

  @@unique([invoiceId, colisId]) // Un colis ne peut être qu'une fois par facture
  @@index([appliedStatus])
}

model InvoiceHistory {
  id         String   @id @default(uuid())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  actionType String // "CREATED", "UPDATED", "CANCELED"
  details    String?
  changedBy  String // Utilisateur ou système
  changedAt  DateTime @default(now())
}

model ClientAvecCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  colis     Colis[]

  @@index([createdAt])
}

model Note {
  id         Int       @id @default(autoincrement())
  contenu    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     Int
  colisId    Int?
  groupageId Int?
  colis      Colis?    @relation(fields: [colisId], references: [id])
  groupage   Groupage? @relation(fields: [groupageId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  RECEIVED
  GROUPED
  IN_TRANSIT
  ARRIVED
  DELIVERED
}

enum TransportType {
  AERIEN
  MARITIME
}

enum AirTransport {
  REGULIER
  EXPRESS
}

enum ItemType {
  ORDINAIRE
  ELECTRONIQUE
  COSMETIQUE
  PHARMACEUTIQUE
  BIJOUX
  CABELLO
  TELEPHONE
}
